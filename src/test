from pytube import YouTube
from moviepy.editor import VideoFileClip, AudioFileClip

# Define the YouTube video URL
video_url = "https://youtu.be/ohS06vkHjLE"

# Create a YouTube object
youtube = YouTube(video_url)

# Choose the desired video and audio streams
video_stream = youtube.streams.filter(file_extension="mp4", resolution="720p").first()
audio_stream = youtube.streams.filter(only_audio=True, abr="128kbps").first()

# Download the video and audio streams
video_file_path = video_stream.download()
audio_file_path = audio_stream.download()

# Load the video and audio as clips
video_clip = VideoFileClip(video_stream.download())
audio_clip = AudioFileClip(audio_file_path)

# Set the audio of the video clip to the downloaded audio clip
video_clip = video_clip.set_audio(audio_clip)

# Specify the output file path and codec
output_file_path = "merged_video.mp4"
output_codec = "libx264"

# Write the merged video with the desired frame rate (e.g., 30 fps)
video_clip.write_videofile(output_file_path, codec=output_codec, fps=30)

# Clean up the downloaded files if needed
video_clip.close()
audio_clip.close()













############################## for video playlist webm ###############################
# select video resolution code

from pytube import YouTube, Playlist
from utils.common import get_video_resolution_choice, get_output_path, get_audio_playlist
from utils.message import video_resolution_messages
def select_video_resolution(url, video_playlist):
    print(video_resolution_messages['intro_message'])

    try:

        if video_playlist:
            playlist = Playlist(url)
            youtube = YouTube(url)
            print("youtube", youtube)
            video_stream = youtube.streams.filter(adaptive=True, file_extension="webm").order_by('resolution').desc()
            print("video_stream", video_stream)
            # audio_stream = youtube.streams.filter(only_audio=True).order_by('abr').desc()
            user_choice = get_video_resolution_choice(video_stream)
            print("index", user_choice)
            # chosen_audio_stream = audio_stream[1]  # static audio quality 128kbps for all videos
            # chosen_video_stream = video_stream[user_choice - 1]
            playlist_list = []  # Initialize a list to store video streams
            for video_url in playlist.video_urls:
                video = YouTube(video_url)
                video_stream = video.streams.filter(adaptive=True, file_extension="webm").order_by('resolution').desc()[user_choice - 1]
                print("video_stream", video_stream)
                playlist_list.append(video_stream)
            audio_playlist, playlist = get_audio_playlist(url)

            return playlist_list, audio_playlist, get_output_path(playlist.title)  # Return the list of audio streams for the playlist and the path

        else:
            # video_resolution = int(input(video_resolution_messages['enter_resolution_number']))
            youtube = YouTube(url)
            video_stream = youtube.streams.filter(adaptive=True, file_extension="webm").order_by('resolution').desc()
            audio_stream = youtube.streams.filter(only_audio=True).order_by('abr').desc()
            user_choice = get_video_resolution_choice(video_stream)

            chosen_audio_stream = audio_stream[1]  # static audio quality 128kbps for all videos
            chosen_video_stream = video_stream[user_choice - 1]
            return chosen_video_stream, chosen_audio_stream, get_output_path(chosen_video_stream.title)


        #     print(video_resolution_messages['wrong_resolution_msg'])
    except Exception as e:
        print(video_resolution_messages['exception_msg'], str(e))



############################## for video playlist only mp4 ###############################

from pytube import YouTube, Playlist
from utils.common import get_video_resolution_choice, get_output_path, get_audio_playlist
from utils.message import video_resolution_messages
def select_video_resolution(url, video_playlist):
    print(video_resolution_messages['intro_message'])

    try:

        if video_playlist:
            playlist = Playlist(url)
            youtube = YouTube(url)
            print("youtube", youtube)
            video_stream = youtube.streams.filter(progressive=True, file_extension="mp4").order_by('resolution').desc()
            print("video_stream", video_stream)
            # audio_stream = youtube.streams.filter(only_audio=True).order_by('abr').desc()
            user_choice = get_video_resolution_choice(video_stream)
            print("index", user_choice)
            # chosen_audio_stream = audio_stream[1]  # static audio quality 128kbps for all videos
            # chosen_video_stream = video_stream[user_choice - 1]
            playlist_list = []  # Initialize a list to store video streams
            for video_url in playlist.video_urls:
                video = YouTube(video_url)
                video_stream = video.streams.filter(progressive=True, file_extension="mp4").order_by('resolution').desc()[user_choice - 1]
                print("video_stream", video_stream)
                playlist_list.append(video_stream)
            # audio_playlist, playlist = get_audio_playlist(url)
            audio_playlist = None
            return playlist_list, audio_playlist, get_output_path(playlist.title)  # Return the list of audio streams for the playlist and the path

        else:
            # video_resolution = int(input(video_resolution_messages['enter_resolution_number']))
            youtube = YouTube(url)
            video_stream = youtube.streams.filter(adaptive=True, file_extension="webm").order_by('resolution').desc()
            audio_stream = youtube.streams.filter(only_audio=True).order_by('abr').desc()
            user_choice = get_video_resolution_choice(video_stream)

            chosen_audio_stream = audio_stream[1]  # static audio quality 128kbps for all videos
            chosen_video_stream = video_stream[user_choice - 1]
            return chosen_video_stream, chosen_audio_stream, get_output_path(chosen_video_stream.title)


        #     print(video_resolution_messages['wrong_resolution_msg'])
    except Exception as e:
        print(video_resolution_messages['exception_msg'], str(e))
